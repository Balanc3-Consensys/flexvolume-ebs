#!/bin/bash

# Notes:
# Requires: aws cli, jq
# $REGION must be set

usage() {
	err "Invalid usage. Usage: "
	err "\t$0 init"
	err "\t$0 attach <json params> <nodename>"
	err "\t$0 detach <mount device> <nodename>"
	err "\t$0 waitforattach <mount device> <json params>"
	err "\t$0 mountdevice <mount dir> <mount device> <json params>"
	err "\t$0 unmountdevice <mount dir>"
	err "\t$0 isattached <json params> <nodename>"
	exit 1
}

err() {
	debug "ERROR $*"
	echo -ne $* 1>&2
}

log() {
	debug "$*"
	echo -ne $* >&1
}

# log file
debug() {
    echo "$(date) $*" >> /var/log/flex-ebs.log
}

#private
ismounted() {
	MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
	if [ "${MOUNT}" == "${MNTPATH}" ]; then
		echo "1"
	else
		echo "0"
	fi
}

#called on master
attach() {
	debug "attach $@"
	JSON_PARAMS=$1
	NODE_NAME=$2
	VOLUMEID=$(echo ${JSON_PARAMS} | jq -r '.volumeID')
    #todo find a proper device
    DEVICE="/dev/sdf"

    OUTPUT=$(aws ec2 attach-volume --region $REGION --volume-id "$VOLUMEID" --instance-id "$NODE_NAME" --device "$DEVICE" 2>/dev/null)
    debug "attach" "aws: $OUTPUT"

	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failure\", \"message\": \"Error mounting volume $VOLUMEID onto node "$NODE_NAME" \"}"
		exit 1
	fi

	log "{\"status\": \"Success\", \"device\":\"${DEVICE}\"}"
	exit 0
}

#called on master periodically after calling attach()
isattached() {
	debug "isattached $@"
	JSON_PARAMS=$1
	NODE_NAME=$2
	VOLUMEID=$(echo ${JSON_PARAMS} | jq -r '.volumeID')

    OUTPUT=$(aws ec2 describe-volumes --region $REGION --volume-ids "$VOLUMEID" 2>/dev/null)
    debug "isattached" "aws: $OUTPUT"

    ATTACH_STATUS=$(echo $OUTPUT | jq -r '.Volumes[].Attachments[].State')
    if [ "$ATTACH_STATUS" = "attached" ]; then
    	log "{\"status\": \"Success\", \"attached\":true}"
	    exit 0
    fi

	err "{\"status\": \"Failure\", \"message\": \"Volume: $VOLUMEID is not attached to: $NODE_NAME\", \"attached\":False}"
	exit 1
}

#called on node, DEVICE comes from attach()
waitforattach() {
	debug "waitforattach $@"
    DEVICE=$1
	JSON_PARAMS=$2
	VOLUMEID=$(echo ${JSON_PARAMS} | jq -r '.volumeID')

    end=$((SECONDS+600))
    while [ $SECONDS -lt $end ]; do
        if [ -b "$DEVICE" ] ; then
            log "{\"status\": \"Success\", \"device\":\"${DEVICE}\"}"
            exit 0
        fi
    done

    err "{ \"status\": \"Failure\", \"message\": \"volume: ${VOLUMEID} not attached to device: ${DEVICE}\" \"}"
    exit 1
}

#called on node
mountdevice() {
	debug "mountdevice $@"
	MNTPATH=$1
	DEVICE=$2
	JSON_PARAMS=$3
	VOLUMEID=$(echo ${JSON_PARAMS} | jq -r '.volumeID')
	FSTYPE=$(echo ${JSON_PARAMS} | jq -r '.["kubernetes.io/fsType"]')

	if [ ! -b "${DEVICE}" ]; then
		err "{\"status\": \"Failure\", \"message\": \"${DEVICE} does not exist\"}"
		exit 1
	fi

	if [ $(ismounted) -eq 1 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	VOLFSTYPE=`blkid -o udev ${DEVICE} 2>/dev/null|grep "ID_FS_TYPE"|cut -d"=" -f2`
	if [ "${VOLFSTYPE}" == "" ]; then
		mkfs -t ${FSTYPE} ${DEVICE} >/dev/null 2>&1
		if [ $? -ne 0 ]; then
			err "{ \"status\": \"Failure\", \"message\": \"Failed to create fs ${FSTYPE} on device ${DEVICE}\"}"
			exit 1
		fi
	fi

	mkdir -p ${MNTPATH} &> /dev/null

	mount ${DEVICE} ${MNTPATH} &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to mount device ${DEVICE} at ${MNTPATH}\"}"
		exit 1
	fi
	log "{\"status\": \"Success\"}"
	exit 0
}

#called on node
unmountdevice() {
	debug "unmountdevice $@"
	MNTPATH=$1

	if [ ! -d ${MNTPATH} ]; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	if [ $(ismounted) -eq 0 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	umount ${MNTPATH} &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
		exit 1
	fi

	log "{\"status\": \"Success\"}"
	exit 0
}

#called on master
detach() {
	debug "detach $@"
#	JSON_PARAMS=$1, should really be same as attach
	PV_NAME=$1
	NODE_NAME=$2
	#hack - make sure PV_NAME is also the VOLUMEID
	VOLUMEID=$PV_NAME

    debug "detach" "detaching volume: $VOLUMEID"
    aws ec2 detach-volume --region $REGION --volume-id "$VOLUMEID"
    DETACH_EXIT_CODE=$?
    if [ "${DETACH_EXIT_CODE}" -ne "0" ]; then
        err "{\"status\": \"Failure\", \"message\": \"AWS returned error during detach\"}"
        exit 1
    fi

	log "{\"status\": \"Success\"}"
	exit 0
}

getvolumename() {
	debug "getvolumename $@"
	JSON_PARAMS=$1
	VOLUMEID=$(echo ${JSON_PARAMS} | jq -r '.volumeID')

	log "{\"status\": \"Success\", \"volumeName\": \"$VOLUMEID\"}"
	exit 0
}

op=$1

if [ "$op" = "init" ]; then
	debug "init $@"
	log "{\"status\":\"Success\",\"capabilities\":{\"attach\":true}}"
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
	attach)
		attach $*
		;;
	detach)
		detach $*
		;;
	waitforattach)
		waitforattach $*
		;;
	isattached)
        isattached $*
        ;;
	mountdevice)
		mountdevice $*
		;;
	unmountdevice)
		unmountdevice $*
		;;
	getvolumename)
		getvolumename $*
		;;
	*)
        log "{ \"status\": \"Not supported: $op $@\" }"
        exit 0
esac

exit 1